/*
 * Implementation of the Algorithm to find the outcast of a list of nouns in a WordNet
 */
public class Outcast {
	private final WordNet wordnet;
	
	/*
	 * Constructor take a WordNet object
	 */
	public Outcast(WordNet wordnet) 
	{
		this.wordnet = wordnet;
	}
	
	/*
	 * Given an array of WordNet nouns, return an outcast
	 */
	public String outcast(String[] nouns)
	{
		int minDist = Integer.MAX_VALUE;
		int min = 0;
		int[][] dists = new int[nouns.length][nouns.length];
		for (int i = 0; i < nouns.length; i++)
		{
			int dist = 0;
			for (int j = 0; j < nouns.length; j++)
			{
				if (dists[i][j] == 0 && i != j)
				{
					dists[i][j] = wordnet.distance(nouns[i], nouns[j]);
					dists[j][i] = dists[i][j];
				}
				dist += dists[i][j];
			}
			if (dist < minDist)
			{
				minDist = dist;
				min = i;
			}
		}
		return nouns[min];
	}
}
