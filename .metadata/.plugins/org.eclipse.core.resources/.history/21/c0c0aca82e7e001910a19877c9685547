import java.awt.Color;
import edu.princeton.cs.algs4.Picture;
import edu.princeton.cs.algs4.EdgeWeightedDigraph;
import edu.princeton.cs.algs4.DirectedEdge;

public class SeamCarver {
	private int h, w;					// Height and width of the Picture
	private Color[][] colors;			// Color of each pixel
	private double distTo[];			// Distance to each vertex
	private DirectedEdge edgeTo[];		// Edge to each vertex
	
	/*
	 * Check if the seam is valid
	 */
	private void checkSeam(int[] seam, char type)
	{
		if (seam == null) throw new IllegalArgumentException();
		if (type != 'v' && type != 'h') throw new IllegalArgumentException();
		if (type == 'h')
		{
			if (h <= 1) throw new IllegalArgumentException();
			if (seam.length != w) throw new IllegalArgumentException();
			for (int i = 0; i < w; i++)
			{
				if (i < w - 1)
					if (Math.abs(seam[i] - seam[i + 1]) > 1) throw new IllegalArgumentException();
				if (seam[i] < 0 || seam[i] > h) throw new IllegalArgumentException();
			}
		}
		if (type == 'v')
		{
			if (w <= 1) throw new IllegalArgumentException();
			if (seam.length != h) throw new IllegalArgumentException();
			for (int i = 0; i < h; i++)
			{
				if (i < h - 1)
					if (Math.abs(seam[i] - seam[i + 1]) > 1) throw new IllegalArgumentException();
				if (seam[i] < 0 || seam[i] > w) throw new IllegalArgumentException();
			}
		}

	}
	
	/*
	 * Edge Relaxation
	 */
	private void relax(DirectedEdge e)
	{
		int v = e.from();
		int w = e.to();
		if (distTo[w] > distTo[v] + e.weight())
		{
			distTo[w] = distTo[v] + e.weight();
			edgeTo[w] = e;
		}
	}
	
	/*
	 * Constructor to the Seam Carver
	 */
	public SeamCarver(Picture picture)
	{
		if (picture == null) throw new IllegalArgumentException();
		
		h = picture.height();
		w = picture.width();
		colors = new Color[w][h];
		
		for (int i = 0; i < w; i++)
			for (int j = 0; j < h; j++)
			{
				int rgb = picture.getRGB(i, j);
				colors[i][j] = new Color(rgb);
			}
	}
	
	/*
	 * Return the current picture
	 */
	public Picture picture()
	{
		Picture picture = new Picture(w, h);
		for (int i = 0; i < w; i++)
			for (int j = 0; j < h; j++)
				picture.set(i, j, colors[i][j]);
		return picture;
	}
	
	/*
	 * Return the width of the current picture
	 */
	public int width()
	{
		return w;
	}
	
	/*
	 * Return the height of the current picture
	 */
	public int height()
	{
		return h;
	}
	
	/*
	 * Return the energy of pixel (x,y)
	 */
	public double energy(int x, int y)
	{
		if (x < 0 || x >= w || y < 0 || y >= h) throw new IllegalArgumentException();
		if (x == 0 || y == 0 || x == w - 1 || y == h - 1) return 1000;
		Color left = colors[x-1][y], right = colors[x+1][y];
		Color up = colors[x][y-1], down = colors[x][y+1];
		double x_comp_square =  (left.getRed() - right.getRed()) * (left.getRed() - right.getRed()) +
								(left.getBlue() - right.getBlue()) * (left.getBlue() - right.getBlue()) +
								(left.getGreen() - right.getGreen()) * (left.getGreen() - right.getGreen());
		double y_comp_square =  (up.getRed() - down.getRed()) * (up.getRed() - down.getRed()) +
								(up.getBlue() - down.getBlue()) * (up.getBlue() - down.getBlue()) +
								(up.getGreen() - down.getGreen()) * (up.getGreen() - down.getGreen());
		double energy = Math.sqrt(x_comp_square + y_comp_square);
		return energy;
	}
	
	/*
	 * Sequence of indices for horizontal seam
	 */
	public int[] findHorizontalSeam()
	{
		EdgeWeightedDigraph G = new EdgeWeightedDigraph(h * w + 2);
		distTo = new double[h * w + 2];
		edgeTo = new DirectedEdge[h * w + 2];
		for (int v = 1; v < h * w + 2; v++)
			distTo[v] = Double.POSITIVE_INFINITY;
		distTo[0] = 0.0;
		for (int y = 0; y < h; y++)
		{
			G.addEdge(new DirectedEdge(0, y + 1, energy(0, y)));				// Connect to the beginning
			G.addEdge(new DirectedEdge((w - 1) * h + y + 1, h * w + 1, 0));		// Connect to the end
		}
		for (int x = 0; x < w - 1; x++)
			for (int y = 0; y < h; y++)
			{
				G.addEdge(new DirectedEdge(x * h + y + 1, (x + 1) * h + y + 1, energy(x + 1, y)));
				if (y > 0)
					G.addEdge(new DirectedEdge(x * h + y + 1, (x + 1) * h + (y - 1) + 1, energy(x + 1, y - 1)));
				if (y < h - 1)
					G.addEdge(new DirectedEdge(x * h + y + 1, (x + 1) * h + (y + 1) + 1, energy(x + 1, y + 1)));
			}
		for (int v = 0; v <= h * w; v++)
			for (DirectedEdge e: G.adj(v))
				relax(e);
		int[] seam = new int[w];
		int current = h * w + 1;
		for (int i = w - 1; i >= 0; i--)
		{
			seam[i] = (edgeTo[current].from() - 1) % h;
			current = edgeTo[current].from();
		}
		return seam;
	}
	
	/*
	 * Sequence of indices for vertical seam
	 */
	public int[] findVerticalSeam()
	{
		EdgeWeightedDigraph G = new EdgeWeightedDigraph(h * w + 2);
		distTo = new double[h * w + 2];
		edgeTo = new DirectedEdge[h * w + 2];
		for (int v = 1; v < h * w + 2; v++)
			distTo[v] = Double.POSITIVE_INFINITY;
		distTo[0] = 0.0;
		for (int x = 0; x < w; x++)
		{
			G.addEdge(new DirectedEdge(0, x + 1, energy(x, 0)));				// Connect to the beginning
			G.addEdge(new DirectedEdge((h - 1) * w + x + 1, h * w + 1, 0));		// Connect to the end
		}
		for (int y = 0; y < h - 1 ; y++)
			for (int x = 0; x < w; x++)
			{
				G.addEdge(new DirectedEdge(y * w + x + 1, (y + 1) * w + x + 1, energy(x, y + 1)));
				if (x > 0)
					G.addEdge(new DirectedEdge(y * w + x + 1, (y + 1) * w + (x - 1) + 1, energy(x - 1, y + 1)));
				if (x < w - 1)
					G.addEdge(new DirectedEdge(y * w + x + 1, (y + 1) * w + (x + 1) + 1, energy(x + 1, y + 1)));
			}
		for (int v = 0; v <= h * w; v++)
			for (DirectedEdge e: G.adj(v))
				relax(e);
		
		int[] seam = new int[h];
		int current = h * w + 1;
		for (int i = h - 1; i >= 0; i--)
		{
			seam[i] = (edgeTo[current].from() - 1) % w;
			current = edgeTo[current].from();
		}
		return seam;
	}
	
	/*
	 * remove horizontal seam from current picture
	 */
	public void removeHorizontalSeam(int[] seam)
	{
		checkSeam(seam, 'h');
		if (h <= 1) throw new IllegalArgumentException();
			
		Color[][] newColors = new Color[w][h--];
		for (int x = 0; x < w; x++)
			for (int y = 0; y < h; y++)
			{
				if (y < seam[x])
					newColors[x][y] = new Color(colors[x][y].getRGB());
				else
					newColors[x][y] = new Color(colors[x][y + 1].getRGB());
			}
		colors = newColors;
	}
	/*
	 * remove vertical seam from current picture
	 */
	public void removeVerticalSeam(int[] seam)
	{
		checkSeam(seam, 'v');
		Color[][] newColors = new Color[w--][h];
		for (int y = 0; y < h; y++)
			for (int x = 0; x < w; x++)
			{
				if (x < seam[y])
					newColors[x][y] = new Color(colors[x][y].getRGB());
				else
					newColors[x][y] = new Color(colors[x + 1][y].getRGB());
			}
		colors = newColors;
	}
	
	public static void main(String[] args)
	{
		Picture pic = new Picture("Minh_Tran.jpg");
		SeamCarver sc = new SeamCarver(pic);
		int[] left = {sc.colors[957][3].getRed(), sc.colors[957][3].getBlue(), sc.colors[957][3].getGreen()};
		int[] right = {sc.colors[959][3].getRed(), sc.colors[959][3].getBlue(), sc.colors[959][3].getGreen()};
		int[] up = {sc.colors[958][2].getRed(), sc.colors[958][2].getBlue(), sc.colors[958][2].getGreen()};
		int[] down = {sc.colors[958][4].getRed(), sc.colors[957][4].getBlue(), sc.colors[958][4].getGreen()};

		System.out.println(java.util.Arrays.toString(left));
		System.out.println(java.util.Arrays.toString(right));
		System.out.println(java.util.Arrays.toString(up));
		System.out.println(java.util.Arrays.toString(down));
		System.out.println(sc.energy(958, 3));
		System.out.println(sc.width() + " " + sc.height());
		
		System.out.println(java.util.Arrays.toString(sc.findHorizontalSeam()));
		for (int i = 0; i < 200; i++)
		{
			System.out.println(i);
			sc.removeVerticalSeam(sc.findVerticalSeam());
		}
		sc.picture().show();
	}
	
}
